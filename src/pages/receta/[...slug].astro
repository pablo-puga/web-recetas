---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import CategoryList from '@components/CategoryList.astro';
import RecipeStructuredData from '@components/RecipeStructuredData.astro';
import BaseLayout from '@layouts/BaseLayout.astro';

export const prerender = true;
export const getStaticPaths = (async () => {
    const recipes = await getCollection('recipes', ({ data }) => {
        return import.meta.env.PROD ? data.published === true : true;
    });

    const categories: string[] = [];

    recipes.forEach((recipe) => {
        recipe.data.categories.forEach((c) => {
            if (categories.includes(c)) return;
            categories.push(c);
        });
    });

    categories.sort();

    return recipes.map((recipe) => ({
        params: {
            slug: recipe.slug,
        },
        props: {
            recipe,
            categories,
        },
    }));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { recipe, categories } = Astro.props;
const { Content } = await recipe.render();
---

<BaseLayout title={recipe.data.title} slug={`/receta/${recipe.slug}`}>
    <RecipeStructuredData recipe={recipe} slot="head" />
    <main>
        {
            recipe.data.cover && (
                <Image
                    src={recipe.data.cover}
                    alt={`${recipe.data.title} cover`}
                />
            )
        }
        <CategoryList categories={categories} />
        <Content />
    </main>
</BaseLayout>
