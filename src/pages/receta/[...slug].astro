---
import { getCollection } from 'astro:content';

import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import CategoryList from '@components/CategoryList.astro';
import OGData from '@components/OGData.astro';
import Recipe from '@components/Recipe.astro';
import RecipeInfo from '@components/RecipeInfo';
import RecipeMeta from '@components/RecipeMeta.astro';
import RecipeStructuredData from '@components/RecipeStructuredData.astro';
import BaseLayout from '@layouts/BaseLayout.astro';

export const prerender = true;
export const getStaticPaths = (async () => {
    const recipes = await getCollection('recipes', ({ data }) => {
        return import.meta.env.PROD ? data.published === true : true;
    });

    const categoriesMap: Record<string, number> = {};

    recipes.forEach((recipe) => {
        recipe.data.categories.forEach((c) => {
            if (categoriesMap[c]) categoriesMap[c]++;
            else categoriesMap[c] = 1;
        });
    });

    const categories: { name: string; count: number }[] = [];

    Object.keys(categoriesMap).forEach((categoryName) =>
        categories.push({
            name: categoryName,
            count: categoriesMap[categoryName],
        }),
    );

    categories.sort((a, b) => a.name.localeCompare(b.name));

    return recipes.map((recipe) => ({
        params: {
            slug: recipe.slug,
        },
        props: {
            recipe,
            categories,
        },
    }));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { recipe, categories } = Astro.props;
const { categories: recipeCategories } = recipe.data;
const { Content, headings } = await recipe.render();
---

<BaseLayout
    title={recipe.data.title}
    slug={`/receta/${recipe.slug}`}
    description={recipe.data.description}
>
    <Fragment slot="head">
        <RecipeStructuredData recipe={recipe} />
        <OGData recipe={recipe} />
    </Fragment>
    <main
        class="flex flex-row mb-20 md:px-2 xl:px-0 lg:gap-10 justify-center w-full"
    >
        <Recipe
            recipe={recipe}
            className="lg:max-w-[900px]"
            style={{ width: '100%' }}
        >
            <Content /></Recipe
        >
        <section class="max-w-[300px] relative">
            <RecipeInfo headings={headings} client:load>
                <RecipeMeta recipe={recipe} slot="Meta" />
                <CategoryList
                    categories={categories}
                    highlightedCategories={recipeCategories}
                    slot="CategoryList"
                />
            </RecipeInfo>
        </section>
    </main>
</BaseLayout>
