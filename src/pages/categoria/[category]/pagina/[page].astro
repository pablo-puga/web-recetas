---
import { getCollection } from 'astro:content';

import type { GetStaticPaths, InferGetStaticPropsType } from 'astro';

import Pagination from '@components/Pagination.astro';
import RecipeList from '@components/RecipeList.astro';
import ContentWithCategoriesLayout from '@layouts/ContentWithCategoriesLayout.astro';
import { getCategoriesFromRecipes } from '@lib/categories';
import { PAGINATION_PAGE_SIZE } from '@lib/constants';
import { capitalize } from '@lib/transforms';

export const prerender = true;
export const getStaticPaths = (async ({ paginate }) => {
    const recipes = await getCollection('recipes', ({ data }) => {
        return import.meta.env.PROD ? data.published === true : true;
    });

    const categories = getCategoriesFromRecipes(recipes);

    const categoriesNames = categories.map((c) => c.name);

    return categoriesNames.flatMap((category) => {
        const filteredRecipes = recipes.filter((recipe) =>
            recipe.data.categories.includes(category),
        );

        return paginate(filteredRecipes, {
            params: {
                category: category.toLocaleLowerCase(),
            },
            pageSize: PAGINATION_PAGE_SIZE,
            props: {
                categories,
            },
        });
    });
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { category } = Astro.params as { category: string };
const { page, categories } = Astro.props as Props;
---

<ContentWithCategoriesLayout
    title={`Categoría "${capitalize(category)}" | Página ${page.currentPage}`}
    slug={`/categoria/${category}/pagina/${page.currentPage}`}
    categories={categories}
>
    <Pagination page={page}>
        <RecipeList recipes={page.data} />
    </Pagination>
</ContentWithCategoriesLayout>
